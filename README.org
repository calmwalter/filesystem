#+title: FILE SYSTEM
#+author: calmwalter
* 引言
  随着计算机系统的不断发展，出现了各种类型的计算机系统，分布式系统，嵌入式系统等等，了解操作系统的构成成为我们开发新的适用于不同环境操作系统的基础。本次实验主要完成设计和开发一个独立的文件系统，实现基本的文件系统操作，以及文件的权限和保护。以及完成对Linux系统内核架构的分析，实现将模块写入内核并加载调用，对嵌入式系统有基础的认知。本次课程设计能够加深对操作系统底层知识的了解。能够在认识文件系统的基础上，提出自己的想法，并对Linux内核代码进行改进和测试，来适应新的需求和环境。对本小节介绍课程设计认为，相关的动机（为什么做这件事）、该系统所要解决的问题。
** 任务要求
  操作系统原理是计算机专业的核心课程。本课程设计的目的旨在加深学生对计算机操作系统内核的理解，提高对操作系统内核的分析与扩展能力。在课程理论教学中，较多地是讲解操作系统理论和实现原理。本课程设计提供两类难度相当的实验，学生可按照自己的兴趣选做A类和B类或C类或D类:
*** 本课程设计要求学生在阅读Linux操作系统源代码的基础上完成如下三个主要Project（包括A、B、C三类）:
    1. 在Linux2.4的内核中添加新的系统调用，以理解系统调用的工作机制，掌握扩展内核功能的技术。
    2. 在Linux2.4中修改调度程序的代码，扩展一个新的调度算法
*** 在Java虚拟机上完成如下Project:
    1. 用JAVA语言模仿“生产者—消费者问题。
    2. 用JAVA语言模仿实现“吃水果”问题
***  方向命题必作题目；
***  自主命题。

为将来在基于Linux的嵌入式系统开发或在Java虚拟机上的软件开发工作奠定基础。

** 选题
   A 1,3
   C


   
* 需求分析与设计
** 需求分析
   文件系统主要需求解决基本的文件系统操作，包括文件写入，读取，文件、文件夹的创建删除等等。
   根据要求，得到以下几点需求：
   1. 实现文件系统的整体架构
   2. 实现文件按系统的文件存储
   3. 实现文件的存取操作
   4. 管理和维护文件的权限
   5. 实现文件系统的账户管理功能
   6. 实现文件移动，文件删除，文件创建功能
   7. 实现磁盘的挂载，移除，删除，格式化等功能
   8. 实现交互式界面
   
** 系统框架和流程 
   [[]]
** 系统流程和模型概述

* 数据结构
** 邻接链表
   本程序运用到单向链表，主要运用在filesystem中对挂载磁盘的信息的链接，挂载的磁盘被结构体disk所包含。disk中用next_disk指针来表示下一个磁盘的位置。这些磁盘都是通过动态内存分配的空间，便于管理删除和维护。这里使用单向链表的主要原因是，磁盘的数量相对较少，O(n)的磁盘查找也相对较快，在整个系统中由很快的磁盘查找速度，不影响整个系统的运行效率，也使得系统的构造精巧化。
** 多叉树
   本程序在对inode的管理上采用了树状结构，所有的磁盘，在创建的时候会初始化一个根目录，也即树的根节点。通过创建文件或者文件夹可以增加该树的子节点和叶节点，文件夹下可继续创建，生成新的子节点，构造出一棵多叉树。遮掩个好处是提高了搜索效率，关联了文件，文件夹之间的关系，便于查找，查询时间在O(m+logN)的时间内，其中m是每一层子节点的复杂度，logN是该文件构造树的深度，即层数。
** 文件存储
   本程序一大亮点在于使用了文件存储，初次运行程序将没有初始化的磁盘，在登陆后，用户可自行创建磁盘，磁盘文件会显示在当前程序运行文件夹下的目录当中，大小为用户创建的大小，创建后，相关的磁盘信息被记录在了磁盘文件中，可以通过mount挂载该磁盘，这将文件中的superblock，inode，blocktable载入到内存中，一般来说，会以动态内存的方式存储，来优化内存的使用。其余的数据仍然放在磁盘中，当要访问是，通过索引inode，blocktable，可以找到相应的数据的偏移位置，然后通过文件访问，在O(1)时间内读取文件并放到内存中作为显示，运行效率相对较高。
** 磁盘构造分配和架构设计
   文件系统的构造在大体上由superblock，blocktable，inode，block组成。每个部分是一个结构体，用来存储相应的信息，具体信息将在下面介绍：
    1. super block：磁盘的头信息存储，概括了磁盘的inode节点数，总的磁盘使用大小，block节点数，便于系统的信息维护，以及在挂载磁盘时有效的读取。
    2. blocktable：用来存储block的状态，状态为validation，当validation为true的时候，也即当前block有效，则该数据块已经被使用，不能被其它文件抢占使用。反之为false，则可以被其他文件占用block。blocktable的查找在O(n)时间内，而对block的索引则在O(1)时间内，具有高效的搜索时间。因为直接接住了，table相对位置即为block相对位置的概念。
    3. inode：存放文件和文件夹额外信息，包括文件或文件夹的名字，大小，类型，拥有者，操作访问权限，以及数据块索引信息。这是用户知晓文件信息的主要方式。
    4. block：存放具体的文件数据，包括文件夹内文件的索引，二级指针的索引，文件数据的存放，block以块的形式存放，每个块以固定的大小在程序初始化阶段进行设定。
    利用以上四个结构来构造整个文件系统的磁盘文件存储结构，实现了程序的在理论层面完成了合理抽象，便于具体的管理和维护。
* 关键技术
** 动态内存
   本程序一大特点是使用动态内存，来实现对内存空间的最小化利用，相对于固定数组来说，动态内存占用空间可变，更灵活的进行内存释放。
   但动态内存使用范围有限，本程序使用了文件存储，因此内存利用会根据不同情况而选择，对于要进行文件存储的，比如文件名等，则进行数组存储，并限制文件名的长度。而对于挂载磁盘后加载到内存中的内容，则使用动态内存，这样可以避免内存的浪费，节省程序占用的空间，在程序运行效率相对不变的情况下。本程序巧妙地运用动态内存的声明和释放，并严格管理相关内存的操作，防止内存泄漏，来使得整个程序运行在理想的情况之下。另外，本程序涉及大量指针的操作，包括二重指针，实现了文件系统的高效编码与实现。
** 递归搜索
   本程序主要在文件搜索，文件目录展示，更新文件信息等方面进行了递归算法构造。使用该方法的成功原因在于本程序巧妙地运用了树状存储结构。在查找的过程中，模块函数通过递归调用自身，每次在更新当前文件后，返回父级文件夹，并进行更新，直到程序遇到根目录为止。这样简化了过程，也使得程序编写简洁明了，合理利用了堆栈。
** 二级存储，查询
   本程序另一大亮点在于程序的文件存储结构上运用了二级存储，类似于linux文件系统的存储，本文件系统提炼了了ext4文件系统显著的多级存储特征。文件和文件夹信息主要存放在inode当中，在inode中设置了direct指针和indirect指针。direct指针使用数组的形式存储在inode当中，而indirect指针则指向block，用来存储数据的数据块。对于文件来说，direct和indirect用来表示文件数据存储的位置，当direct不够用时，便使用二级存储，使用indirect指向一个数据块，在数据块中存储相同与direct的指针，指向存储数据的数据块。这样就实现了二级存储，并且都数据的索引都时O(1)的操作复杂度，效率相对较高。对于文件夹inode，direct和indirect则存储着文件夹内文件的指针，存储方式同文件inode，这里不再赘述。由上可见，同意了文件夹和文件结构后，整个存储机制简洁明了，便于管理，维护，具有搞笑的文件存储的能力。
** 文件与文件夹统一化管理
   在这里我们将文件和文件夹统一到inode中，使其归一化，也即相当于文件夹也是文件。这样做，使得程序抽象化，更易于管理和维护。
** 账户及权限管理
   为了加强文件系统的安全性，特别的加入了账户设置，来增加文件系统的安全性。账户可分为两类，一类是管理员账户，可以用来访问任何类型的文件，任何权限的文件和文件夹。另一类是使用者账户，只能访问自己创建的文件和文件夹，行为受限。这样便于文件系统的管理和使用。也使得不同用户之间的操作不受影响。账户管理由结构体account提供，包括了用户名，密码，权限三个属性，并包含两个独立的函数，一个是useradd，模仿linux系统useradd功能，另一个是verify，验证用户输入信息是否正确，将返回结构体指针。这样配置后整个账户管理简洁明了，但不失主要功能。
** 模块化设计
   本程序将真个系统分为多个模块，这样一来便于代码维护和管理。整个系统有三个模块，一个是，文件系统本身的基础模块，另一个是文件系统的工具包调用模块，内部函数都用__下划线开头，以便于区分。最后一个是账户模块，该模块中包含所有的账户操作功能。并且这些模块的关系，都被整合到文件系统中，可以在fs.h中找到相应的关系，主结构体filesystem包含这些信息。
   
* 运行结果
** 运行环境
   1. Linux系统
      安装gcc编译环境
      磁盘空间大于128MB(对于本程序大多数合理的磁盘来说)
   2. window10系统
      配置要求MinGW in windows 
      设置系统环境变量到path/to/mingw/bin
      磁盘空间大于128mb
   3. 编译方式
      #+begin_src
      gcc main.c fs.c account.c utils.c  
      #+end_src
   4. 运行
      #+begin_src
      ./a.out //linux系统
      a.exe //windows系统
      #+end_src

** 服务模式
   该文件系统主要在终端中运行，用户可以在终端运行程序。用户可在终端中获得模拟于linux文件系统的终端操作界面。用户界面交互性在基于终端方面较好，具有路径显示功能，当前用户的显示等功能。
** 运行结果
   
* 调试和改进
  调试中，主要针对当前代码动态指针相关操作的优化，避免内存泄漏和长时间占用。修改输入输出交互性，提高整个程序的用户友好程度。模块化代码，便于维护。并解决了之前存在的文件数据索边界判断问题。通过gdb调试完成了死循环和野指针的排查。
  改进，首先是对于复制粘贴功能的改进，用于支持多磁盘间的复制粘贴。另外，增加文件的读写权限，readonly，writeonly，readandwrite。增加文件的移动的多磁盘间的操作。改善用户界面，实现gui，使用户界面更加友好。增加磁盘系统和外界的联系，可以将外界文件存入磁盘文件。增加文件编辑功能，拥有类似vim的文本编辑功能。对存入空间进一步优化，实现资源的合理利用，增加自动文件存储优化和磁盘清理，增加文件系统的紧凑度和系统的运行速度。
* 心得结论
  通过本次实验，我学会和掌握了基本的文件系统的概念，并深入了解了linux文件系统的构成和数据结构，以及其中的一些算法知识。本次实验中，发现文件系统需要事先构造正确合理的模型，然后通过该模型实现具体的代码。本次实验中，遇到了内存泄漏问题，以及当使用循环时，由于判断疏忽导致的死循环等问题，但通过gdb调试排查，查获了其中的问题，并进行了纠正，最后得到了现有的可用的文件系统。
* 参考文献

